#!/bin/bash

## Script path
SCRIPT_ROOT=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)

export SINGLE_HOST=${SINGLE_HOST:-127.0.0.1}
export DEK_HOME=${DEK_HOME:-"$SCRIPT_ROOT"}
export HTTP_PROXY=${HTTP_PROXY:-""}
export HTTP_PROXY=${HTTPS_PROXY:-""}
export FTP_PROXY=${FTP_PROXY:-""}
export NO_PROXY=${NO_PROXY:-".intel.com,intel.com,localhost,127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"}

## inventory.yml
INVENTORY_DEF=(
    '.all.vars.single_node_deployment=true'
    '.controller_group.hosts.controller.ansible_host=strenv(SINGLE_HOST)'
    '.edgenode_group.hosts.node01.ansible_host=strenv(SINGLE_HOST)'
)

## 10-default.yml
VARS_DEF=(
    '.proxy_env.http_proxy=strenv(HTTP_PROXY)'
    '.proxy_env.https_proxy=strenv(HTTP_PROXY)'
    '.proxy_env.ftp_proxy=strenv(FTP_PROXY)'
    '.proxy_env.no_proxy=strenv(NO_PROXY)'
    '.sriov_network_operator_enable=false'
    '.sriov_network_operator_configure_enable=false'
    '.sriov_network_detection_application_enable=false'
    '.e810_driver_enable=false'
    '.platform_attestation_node=false'
    '.sgx_enabled=false'
)

## assign default
INVENTORY=("${INVENTORY[@]:-${INVENTORY_DEF[@]}}")
VARS=("${VARS[@]:-${VARS_DEF[@]}}")

config() {
    local file=$1
    shift
    local vars=("$@")
    for i in "${vars[@]}"; do
        echo "[$file][update] $i"
        yq -i $i $file
    done
}

query() {
    local file=$1
    shift
    local vars=("$@")
    for i in "${vars[@]}"; do
        key=(${i//=/ })
        value=`yq ${key[0]} $file`
        echo "[$file][query] $key=$value"
    done
}

deps() {
    echo "Install deps"
    local version=v4.26.1
    local binary=yq_linux_amd64
    sudo wget https://github.com/mikefarah/yq/releases/download/${version}/${binary} -O /usr/bin/yq
    sudo chmod +x /usr/bin/yq
    echo "Install deps Done"
}

precheck() {
    if [ -z $(command -v yq) ] ; then
        echo "Cannot find yq, please run '$(basename $0) deps'"
        exit 1
    fi

    if [ ! -f "$DEK_HOME/single_node_network_edge.yml" ]; then
        echo "Canno5 find DEK, please set env DEK_HOME before run the script"
        exit 1
    fi
}

update() {
    echo "Update DEK"
    config $DEK_HOME/inventory.yml "${INVENTORY[@]}"
    config $DEK_HOME/inventory/default/group_vars/all/10-default.yml "${VARS[@]}"
    echo "Update DEK Done"
}

verify() {
    echo "Verify DEK"
    query $DEK_HOME/inventory.yml "${INVENTORY[@]}"
    query $DEK_HOME/inventory/default/group_vars/all/10-default.yml "${VARS[@]}"
    echo "Verify DEK Done"
}

deploy() {
    echo "Deploy DEK"
    $DEK_HOME/deploy.sh
    echo "Deploy DEK Done"
}

usage() {
    echo "\
Usage: $(basename $0) {deps|update|verify|deploy}
Single node deployment: 
$ export SINGLE_HOST=a.b.c.d
Note: please export the env varibles before run the commands"    
}

main() {
    case $1 in
        deps )
            deps
            ;;
        update )
            precheck
            update
            ;;
        verify )
            precheck
            verify
            ;;
        deploy )
            precheck
            deploy
            ;;
        * )
            usage
            ;;
    esac
}

main $*
